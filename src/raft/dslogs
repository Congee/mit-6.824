#!/usr/bin/env python
import sys
from typing import Optional
import re

import typer
from rich import print
from rich.columns import Columns
from rich.console import Console

# fmt: off
# Mapping from topics to colors
TOPICS = {
    "TIMR": "#9a9a99",
    "VOTE": "#67a0b2",
    "LEAD": "#d0b343",
    "TERM": "#70c43f",
    "LOG1": "#4878bc",
    "LOG2": "#398280",
    "CMIT": "#98719f",
    "PERS": "#d08341",
    "SNAP": "#FD971F",
    "DROP": "#ff615c",
    "CLNT": "#00813c",
    "TEST": "#fe2c79",
    "INFO": "#ffffff",
    "WARN": "#d08341",
    "ERRO": "#fe2626",
    "TRCE": "#fe2626",
}
# fmt: on


def list_topics(value: Optional[str]):
    if value is None:
        return value
    topics = value.split(",")
    for topic in topics:
        if topic not in TOPICS:
            raise typer.BadParameter(f"topic {topic} not recognized")
    return topics


def main(
    file:      typer.FileText = typer.Argument(None, help="File to read, stdin otherwise"),
    colorize:  bool           = typer.Option(True, "--no-color"),
    n_columns: Optional[int]  = typer.Option(None, "--columns", "-c"),
    ignore:    Optional[str]  = typer.Option(None, "--ignore", "-i", callback=list_topics),
    just:      Optional[str]  = typer.Option(None, "--just", "-j", callback=list_topics),
    timestamp: Optional[bool] = typer.Option(True,  "--timestamp", "-t"),
):
    topics = list(TOPICS)

    # We can take input from a stdin (pipes) or from a file
    input_ = file if file else sys.stdin
    # Print just some topics or exclude some topics (good for avoiding verbose ones)
    if just:
        topics = just
    if ignore:
        topics = [lvl for lvl in topics if lvl not in set(ignore)]

    topics = set(topics)
    console = Console()
    width = console.size.width

    panic = False
    for line in input_:
        try:
            # Debug calls from the test suite aren't associated with
            # any particular peer, term
            # time, topic, *msg = line.strip().split(" ")
            # if topic == 'TEST':
            #     print(time, *msg)
            #     continue

            time, topic, term, peer, msg = re.split(r" {1,3}", line.strip(), maxsplit=4)
            # To ignore some topics
            if topic not in topics:
                continue

            msg = " ".join([term, peer, msg])

            col = int(peer[1:])  # peer id S0, S1, ...

            # Colorize output by using rich syntax when needed
            if colorize and topic in TOPICS:
                color = TOPICS[topic]
                msg = f"[{color}]{msg}[/{color}]"

            # Single column printing. Always the case for debug stmts in tests
            if n_columns is None:
                print(time, msg)
            # Multi column printing, timing is dropped to maximize horizontal
            # space. Heavylifting is done through rich.column.Columns object
            else:
                cols = ["" for _ in range(n_columns)]
                if timestamp:
                    msg = time + ' ' + msg
                else:
                    msg = '' + msg
                cols[col] = msg
                col_width = int(width / n_columns)
                cols = Columns(cols, width=col_width - 1, equal=True, expand=True)
                print(cols)
        except Exception:
            # Code from tests or panics does not follow format
            # so we print it as is
            if line.startswith("panic"):
                panic = True
            # Output from tests is usually important so add a
            # horizontal line with hashes to make it more obvious
            if not panic:
                print("#" * console.width)
            print(line, end="")


if __name__ == "__main__":
    typer.run(main)
